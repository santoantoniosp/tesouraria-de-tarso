generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Community {
  id      String   @id @default(uuid()) @db.Uuid
  name    String
  address Address?

  bankAccounts BankAccount[]
  transactions Transaction[]
  categories   Category[]
  members      Member[]

  @@map("communities")
}

model Address {
  id           String  @id @default(uuid()) @db.Uuid
  logradouro   String
  neighborhood String
  zipCode      String
  number       String
  complement   String?
  communityId  String  @unique @map("community_id") @db.Uuid

  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@map("address")
}

enum BankAccountType {
  CHECKING
  INVESTMENT
  CASH

  @@map("bank_account_type")
}

model BankAccount {
  id             String          @id @default(uuid()) @db.Uuid
  communityId    String          @map("community_id") @db.Uuid
  name           String
  initialBalance Float           @map("initial_balance")
  type           BankAccountType
  color          String

  community    Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bank_accounts")
}

model Transaction {
  id            String          @id @default(uuid()) @db.Uuid
  communityId   String          @map("community_id") @db.Uuid
  bankAccountId String          @map("bank_account_id") @db.Uuid
  categoryId    String?         @map("category_id") @db.Uuid
  memberId      String          @map("member_id") @db.Uuid
  name          String
  value         Float
  date          DateTime
  type          TransactionType

  community   Community   @relation(fields: [communityId], references: [id], onDelete: Cascade)
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  member      Member      @relation(fields: [memberId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE

  @@map("transaction_type")
}

model Category {
  id           String          @id @default(uuid()) @db.Uuid
  communityId  String          @map("community_id") @db.Uuid
  name         String
  icon         String
  type         TransactionType
  transactions Transaction[]

  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@map("categories")
}

model Member {
  id            String        @id @default(uuid()) @db.Uuid
  name          String
  cpf           String        @unique
  email         String        @unique
  password      String
  communityRole CommunityRole @default(reader)

  Community    Community     @relation(fields: [communityId], references: [id])
  communityId  String        @map("community_id") @db.Uuid
  transactions Transaction[]

  @@map("members")
}

enum CommunityRole {
  owner
  contributor
  reader

  @@map("community_role")
}
